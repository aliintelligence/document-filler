const nodemailer = require('nodemailer');

// Email configuration
const INSTALL_PICTURES_EMAIL = process.env.INSTALL_PICTURES_EMAIL || 'service@miamiwaterandair.com';
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;

module.exports = async (req, res) => {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { customerData, pictures, notes } = req.body;

    if (!customerData || !pictures || pictures.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Customer data and pictures are required'
      });
    }

    console.log(`Processing install pictures for customer: ${customerData.firstName} ${customerData.lastName}`);
    console.log(`Number of pictures: ${pictures.length}`);

    // Create transporter
    const transporter = nodemailer.createTransporter({
      service: 'gmail', // or your email service
      auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASS
      }
    });

    // Prepare attachments from base64 images
    const attachments = pictures.map((picture, index) => {
      // Extract base64 data from data URL
      const base64Data = picture.preview.split(',')[1];
      const fileExtension = picture.name.split('.').pop() || 'jpg';

      return {
        filename: `install_picture_${index + 1}_${customerData.lastName}.${fileExtension}`,
        content: base64Data,
        encoding: 'base64',
        contentType: picture.file.type || 'image/jpeg'
      };
    });

    // Email content
    const emailHTML = `
      <h2>üè† Installation Site Pictures</h2>

      <h3>Customer Information:</h3>
      <table style="border-collapse: collapse; margin-bottom: 20px;">
        <tr>
          <td style="padding: 5px; font-weight: bold;">Name:</td>
          <td style="padding: 5px;">${customerData.firstName} ${customerData.lastName}</td>
        </tr>
        <tr>
          <td style="padding: 5px; font-weight: bold;">Address:</td>
          <td style="padding: 5px;">${customerData.address}, ${customerData.city}, ${customerData.state} ${customerData.zipCode}</td>
        </tr>
        <tr>
          <td style="padding: 5px; font-weight: bold;">Phone:</td>
          <td style="padding: 5px;">${customerData.phone}</td>
        </tr>
        <tr>
          <td style="padding: 5px; font-weight: bold;">Email:</td>
          <td style="padding: 5px;">${customerData.email}</td>
        </tr>
        ${customerData.equipment ? `
        <tr>
          <td style="padding: 5px; font-weight: bold;">Equipment:</td>
          <td style="padding: 5px;">${customerData.equipment}</td>
        </tr>
        ` : ''}
      </table>

      <h3>Installation Pictures:</h3>
      <p>Please find ${pictures.length} installation site picture(s) attached to this email.</p>

      ${notes ? `
        <h3>Installation Notes:</h3>
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; border-left: 4px solid #007bff;">
          ${notes.replace(/\n/g, '<br>')}
        </div>
      ` : ''}

      <hr style="margin: 30px 0;">
      <p style="color: #666; font-size: 12px;">
        This email was automatically generated by the Miami Water & Air document system.<br>
        Pictures taken on: ${new Date().toLocaleString()}<br>
        Total file size: ${(pictures.reduce((total, pic) => total + pic.file.size, 0) / 1024 / 1024).toFixed(2)} MB
      </p>
    `;

    const mailOptions = {
      from: EMAIL_USER,
      to: INSTALL_PICTURES_EMAIL,
      subject: `üè† Install Pictures - ${customerData.firstName} ${customerData.lastName} (${customerData.city}, ${customerData.state})`,
      html: emailHTML,
      attachments: attachments
    };

    // Send email
    const result = await transporter.sendMail(mailOptions);
    console.log('Install pictures email sent successfully:', result.messageId);

    return res.status(200).json({
      success: true,
      message: 'Install pictures sent successfully',
      messageId: result.messageId,
      pictureCount: pictures.length
    });

  } catch (error) {
    console.error('Error sending install pictures:', error);
    return res.status(500).json({
      success: false,
      error: 'Failed to send install pictures',
      details: error.message
    });
  }
};